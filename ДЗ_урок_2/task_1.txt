1. Дан код:

1     var a = 1, b = 1, c, d;
2     c = ++a; alert(c);           // 2
3     d = b++; alert(d);           // 1
4     c = (2+ ++a); alert(c);      // 5
5     d = (2+ b++); alert(d);      // 4
6     alert(a);                    // 3
7     alert(b);                    // 3

Почему код даёт именно такие результаты?

Решение:
* c = ++a; alert(c); // 2    // префиксный инкремент (++a) сначала увеличивает значение переменной на 1, затем возвращает новое значение, поэтому   c= a+1=1+1=2;
* d = b++; alert(d); // 1    // постпрефиксный инкремент (b++) сначала возвращает старое значение переменной, а уже потом увеличивает значение переменной на 1, поэтому   d = b = 1;
* c = (2+ ++a); alert(c); // 5     // префиксный инкремент (++a) сначала увеличивает значение переменной на 1, после второй строки кода задания a = 2, в 4 строке кода a увеличивается ещё на 1, в итоге a = 3. Конечный результат c = (2 + 3) = 5;
* d = (2+ b++); alert(d); // 4    // постпрефиксный инкремент (b++) сначала возвращает старое значение переменной, а уже потом увеличивает значение переменной на 1. b после 3-й строки кода равно 2 - именно это значение вернёт b++ перред увеличением, поэтому d = 2 + 2 = 4, переменная b по завершению постпрефиксного инкремента будет равна 3.
* alert(a); // 3  // начальное значение 1 было увеличено на 1 два раза: ++a во 2-й строке кода, ++a в 4-й строке кода. В итоге a = 1+1+1;
* alert(b); // 3  // начальное значение 1 было увеличено на 1 два раза: b++ в 3-й строке кода, b++ в 5-й строке кода. В итоге b = 1+1+1;
